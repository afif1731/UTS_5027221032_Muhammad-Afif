// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "game_protoc.proto" (package "game", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message game.ResponseStatus
 */
export interface ResponseStatus {
    /**
     * @generated from protobuf field: bool status = 1;
     */
    status: boolean;
    /**
     * @generated from protobuf field: int32 code = 2;
     */
    code: number;
    /**
     * @generated from protobuf field: string res_msg = 3;
     */
    resMsg: string;
}
/**
 * @generated from protobuf message game.ResponseMetadata
 */
export interface ResponseMetadata {
    /**
     * @generated from protobuf field: string filter = 1;
     */
    filter: string;
    /**
     * @generated from protobuf field: string sort = 2;
     */
    sort: string;
    /**
     * @generated from protobuf field: int32 limit = 3;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 page = 4;
     */
    page: number;
    /**
     * @generated from protobuf field: int32 max_page = 5;
     */
    maxPage: number;
}
/**
 * @generated from protobuf message game.RegisterRequest
 */
export interface RegisterRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 3;
     */
    password: string;
}
/**
 * @generated from protobuf message game.RegisterResponse
 */
export interface RegisterResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.RegisterResponse.Data data = 2;
     */
    data?: RegisterResponse_Data;
}
/**
 * @generated from protobuf message game.RegisterResponse.Data
 */
export interface RegisterResponse_Data {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message game.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message game.Loginresponse
 */
export interface Loginresponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.Loginresponse.Data data = 2;
     */
    data?: Loginresponse_Data;
}
/**
 * @generated from protobuf message game.Loginresponse.Data
 */
export interface Loginresponse_Data {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message game.MeRequest
 */
export interface MeRequest {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message game.MeResponse
 */
export interface MeResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.MeResponse.Data data = 2;
     */
    data?: MeResponse_Data;
}
/**
 * @generated from protobuf message game.MeResponse.Data
 */
export interface MeResponse_Data {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message game.UserDetailRequest
 */
export interface UserDetailRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message game.UserDetailResponse
 */
export interface UserDetailResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.UserDetailResponse.Data data = 2;
     */
    data?: UserDetailResponse_Data;
}
/**
 * @generated from protobuf message game.UserDetailResponse.Data
 */
export interface UserDetailResponse_Data {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: string user_email = 3;
     */
    userEmail: string;
    /**
     * @generated from protobuf field: int32 elo = 4;
     */
    elo: number;
    /**
     * @generated from protobuf field: string created_at = 5;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message game.RecentGameRequest
 */
export interface RecentGameRequest {
    /**
     * @generated from protobuf field: string account_id = 1;
     */
    accountId: string;
    /**
     * @generated from protobuf field: string filter = 2;
     */
    filter: string;
    /**
     * @generated from protobuf field: string sort = 3;
     */
    sort: string;
    /**
     * @generated from protobuf field: int32 limit = 4;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 page = 5;
     */
    page: number;
}
/**
 * @generated from protobuf message game.RecentGameResponse
 */
export interface RecentGameResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.ResponseMetadata metadata = 2;
     */
    metadata?: ResponseMetadata;
    /**
     * @generated from protobuf field: repeated game.RecentGameResponse.Data data = 3;
     */
    data: RecentGameResponse_Data[];
}
/**
 * @generated from protobuf message game.RecentGameResponse.Data
 */
export interface RecentGameResponse_Data {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string player_1 = 2;
     */
    player1: string;
    /**
     * @generated from protobuf field: string player_2 = 3;
     */
    player2: string;
    /**
     * @generated from protobuf field: string game_type = 4;
     */
    gameType: string;
    /**
     * @generated from protobuf field: bool is_win = 5;
     */
    isWin: boolean;
    /**
     * @generated from protobuf field: int32 point = 6;
     */
    point: number;
}
/**
 * @generated from protobuf message game.LeaderboardRequest
 */
export interface LeaderboardRequest {
    /**
     * @generated from protobuf field: string filter = 1;
     */
    filter: string;
    /**
     * @generated from protobuf field: string sort = 2;
     */
    sort: string;
    /**
     * @generated from protobuf field: string limit = 3;
     */
    limit: string;
    /**
     * @generated from protobuf field: string page = 4;
     */
    page: string;
}
/**
 * @generated from protobuf message game.LeaderboardResponse
 */
export interface LeaderboardResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.ResponseMetadata metadata = 2;
     */
    metadata?: ResponseMetadata;
    /**
     * @generated from protobuf field: repeated game.LeaderboardResponse.Data data = 3;
     */
    data: LeaderboardResponse_Data[];
}
/**
 * @generated from protobuf message game.LeaderboardResponse.Data
 */
export interface LeaderboardResponse_Data {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string user_name = 2;
     */
    userName: string;
    /**
     * @generated from protobuf field: string user_email = 3;
     */
    userEmail: string;
    /**
     * @generated from protobuf field: int32 elo = 4;
     */
    elo: number;
    /**
     * @generated from protobuf field: string created_at = 5;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message game.UpdatePasswordRequest
 */
export interface UpdatePasswordRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string old_pass = 2;
     */
    oldPass: string;
    /**
     * @generated from protobuf field: string new_pass = 3;
     */
    newPass: string;
}
/**
 * @generated from protobuf message game.UpdatePasswordResponse
 */
export interface UpdatePasswordResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.UpdatePasswordResponse.Data data = 2;
     */
    data?: UpdatePasswordResponse_Data;
}
/**
 * @generated from protobuf message game.UpdatePasswordResponse.Data
 */
export interface UpdatePasswordResponse_Data {
    /**
     * @generated from protobuf field: string empty_data = 1;
     */
    emptyData: string;
}
/**
 * @generated from protobuf message game.DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
/**
 * @generated from protobuf message game.DeleteUserResponse
 */
export interface DeleteUserResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.DeleteUserResponse.Data data = 2;
     */
    data?: DeleteUserResponse_Data;
}
/**
 * @generated from protobuf message game.DeleteUserResponse.Data
 */
export interface DeleteUserResponse_Data {
    /**
     * @generated from protobuf field: string empty_data = 1;
     */
    emptyData: string;
}
/**
 * @generated from protobuf message game.GameDetailRequest
 */
export interface GameDetailRequest {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
}
/**
 * @generated from protobuf message game.GameDetailResponse
 */
export interface GameDetailResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.GameDetailResponse.Data data = 2;
     */
    data?: GameDetailResponse_Data;
}
/**
 * @generated from protobuf message game.GameDetailResponse.Data
 */
export interface GameDetailResponse_Data {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: int32 move_count = 2;
     */
    moveCount: number;
    /**
     * @generated from protobuf field: string p1_id = 3;
     */
    p1Id: string;
    /**
     * @generated from protobuf field: string p2_id = 4;
     */
    p2Id: string;
    /**
     * @generated from protobuf field: string winner = 5;
     */
    winner: string;
    /**
     * @generated from protobuf field: repeated string p1_move = 6;
     */
    p1Move: string[];
    /**
     * @generated from protobuf field: repeated string p2_move = 7;
     */
    p2Move: string[];
    /**
     * @generated from protobuf field: repeated string all_move = 8;
     */
    allMove: string[];
    /**
     * @generated from protobuf field: repeated string board = 9;
     */
    board: string[];
    /**
     * @generated from protobuf field: string created_at = 10;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string duration = 11;
     */
    duration: string;
}
/**
 * @generated from protobuf message game.CreateGameRequest
 */
export interface CreateGameRequest {
    /**
     * @generated from protobuf field: string player_1 = 1;
     */
    player1: string;
    /**
     * @generated from protobuf field: string player_2 = 2;
     */
    player2: string;
    /**
     * @generated from protobuf field: string game_type = 3;
     */
    gameType: string;
}
/**
 * @generated from protobuf message game.CreateGameResponse
 */
export interface CreateGameResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.CreateGameResponse.Data data = 2;
     */
    data?: CreateGameResponse_Data;
}
/**
 * @generated from protobuf message game.CreateGameResponse.Data
 */
export interface CreateGameResponse_Data {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string game_type = 2;
     */
    gameType: string;
    /**
     * @generated from protobuf field: string player1_id = 3;
     */
    player1Id: string;
    /**
     * @generated from protobuf field: string player1_name = 4;
     */
    player1Name: string;
    /**
     * @generated from protobuf field: string player2_id = 5;
     */
    player2Id: string;
    /**
     * @generated from protobuf field: string player2_name = 6;
     */
    player2Name: string;
    /**
     * @generated from protobuf field: string created_at = 7;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message game.UpdateMoveRequest
 */
export interface UpdateMoveRequest {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: int32 player_type = 2;
     */
    playerType: number;
    /**
     * @generated from protobuf field: string move = 3;
     */
    move: string;
    /**
     * @generated from protobuf field: repeated string board = 4;
     */
    board: string[];
}
/**
 * @generated from protobuf message game.UpdateMoveResponse
 */
export interface UpdateMoveResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.UpdateMoveResponse.Data data = 2;
     */
    data?: UpdateMoveResponse_Data;
}
/**
 * @generated from protobuf message game.UpdateMoveResponse.Data
 */
export interface UpdateMoveResponse_Data {
    /**
     * @generated from protobuf field: repeated string p1_move = 1;
     */
    p1Move: string[];
    /**
     * @generated from protobuf field: repeated string p2_move = 2;
     */
    p2Move: string[];
    /**
     * @generated from protobuf field: repeated string all_move = 3;
     */
    allMove: string[];
    /**
     * @generated from protobuf field: repeated string board = 4;
     */
    board: string[];
    /**
     * @generated from protobuf field: int32 move_count = 5;
     */
    moveCount: number;
}
/**
 * @generated from protobuf message game.EndGameRequest
 */
export interface EndGameRequest {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string winner = 2;
     */
    winner: string;
}
/**
 * @generated from protobuf message game.EndGameResponse
 */
export interface EndGameResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.EndGameResponse.Data data = 2;
     */
    data?: EndGameResponse_Data;
}
/**
 * @generated from protobuf message game.EndGameResponse.Data
 */
export interface EndGameResponse_Data {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string winner = 2;
     */
    winner: string;
    /**
     * @generated from protobuf field: string duration = 3;
     */
    duration: string;
    /**
     * @generated from protobuf field: int32 point = 4;
     */
    point: number;
}
/**
 * @generated from protobuf message game.BotMoveRequest
 */
export interface BotMoveRequest {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: repeated string board = 2;
     */
    board: string[];
}
/**
 * @generated from protobuf message game.BotMoveResponse
 */
export interface BotMoveResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.BotMoveResponse.Data data = 2;
     */
    data?: BotMoveResponse_Data;
}
/**
 * @generated from protobuf message game.BotMoveResponse.Data
 */
export interface BotMoveResponse_Data {
    /**
     * @generated from protobuf field: repeated string p1_move = 1;
     */
    p1Move: string[];
    /**
     * @generated from protobuf field: repeated string p2_move = 2;
     */
    p2Move: string[];
    /**
     * @generated from protobuf field: repeated string all_move = 3;
     */
    allMove: string[];
    /**
     * @generated from protobuf field: repeated string board = 4;
     */
    board: string[];
    /**
     * @generated from protobuf field: int32 move_count = 5;
     */
    moveCount: number;
}
/**
 * @generated from protobuf message game.CreateRoomRequest
 */
export interface CreateRoomRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message game.CreateRoomResponse
 */
export interface CreateRoomResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.CreateRoomResponse.Data data = 2;
     */
    data?: CreateRoomResponse_Data;
}
/**
 * @generated from protobuf message game.CreateRoomResponse.Data
 */
export interface CreateRoomResponse_Data {
    /**
     * @generated from protobuf field: string room_id = 1;
     */
    roomId: string;
    /**
     * @generated from protobuf field: string creator = 2;
     */
    creator: string;
    /**
     * @generated from protobuf field: bool is_wait = 3;
     */
    isWait: boolean;
}
/**
 * @generated from protobuf message game.JoinRoomRequest
 */
export interface JoinRoomRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string room_id = 2;
     */
    roomId: string;
}
/**
 * @generated from protobuf message game.JoinroomResponse
 */
export interface JoinroomResponse {
    /**
     * @generated from protobuf field: game.ResponseStatus status = 1;
     */
    status?: ResponseStatus;
    /**
     * @generated from protobuf field: game.JoinroomResponse.Data data = 2;
     */
    data?: JoinroomResponse_Data;
}
/**
 * @generated from protobuf message game.JoinroomResponse.Data
 */
export interface JoinroomResponse_Data {
    /**
     * @generated from protobuf field: string game_id = 1;
     */
    gameId: string;
    /**
     * @generated from protobuf field: string player_1 = 2;
     */
    player1: string;
    /**
     * @generated from protobuf field: string player_2 = 3;
     */
    player2: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ResponseStatus$Type extends MessageType<ResponseStatus> {
    constructor() {
        super("game.ResponseStatus", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "res_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseStatus>): ResponseStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        message.code = 0;
        message.resMsg = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseStatus): ResponseStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                case /* int32 code */ 2:
                    message.code = reader.int32();
                    break;
                case /* string res_msg */ 3:
                    message.resMsg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        /* int32 code = 2; */
        if (message.code !== 0)
            writer.tag(2, WireType.Varint).int32(message.code);
        /* string res_msg = 3; */
        if (message.resMsg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.resMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.ResponseStatus
 */
export const ResponseStatus = new ResponseStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseMetadata$Type extends MessageType<ResponseMetadata> {
    constructor() {
        super("game.ResponseMetadata", [
            { no: 1, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sort", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "max_page", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseMetadata>): ResponseMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filter = "";
        message.sort = "";
        message.limit = 0;
        message.page = 0;
        message.maxPage = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseMetadata): ResponseMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filter */ 1:
                    message.filter = reader.string();
                    break;
                case /* string sort */ 2:
                    message.sort = reader.string();
                    break;
                case /* int32 limit */ 3:
                    message.limit = reader.int32();
                    break;
                case /* int32 page */ 4:
                    message.page = reader.int32();
                    break;
                case /* int32 max_page */ 5:
                    message.maxPage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filter = 1; */
        if (message.filter !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filter);
        /* string sort = 2; */
        if (message.sort !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sort);
        /* int32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).int32(message.limit);
        /* int32 page = 4; */
        if (message.page !== 0)
            writer.tag(4, WireType.Varint).int32(message.page);
        /* int32 max_page = 5; */
        if (message.maxPage !== 0)
            writer.tag(5, WireType.Varint).int32(message.maxPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.ResponseMetadata
 */
export const ResponseMetadata = new ResponseMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends MessageType<RegisterRequest> {
    constructor() {
        super("game.RegisterRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterRequest>): RegisterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterRequest): RegisterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string password */ 3:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string password = 3; */
        if (message.password !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.RegisterRequest
 */
export const RegisterRequest = new RegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterResponse$Type extends MessageType<RegisterResponse> {
    constructor() {
        super("game.RegisterResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => RegisterResponse_Data }
        ]);
    }
    create(value?: PartialMessage<RegisterResponse>): RegisterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterResponse): RegisterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.RegisterResponse.Data data */ 2:
                    message.data = RegisterResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.RegisterResponse.Data data = 2; */
        if (message.data)
            RegisterResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.RegisterResponse
 */
export const RegisterResponse = new RegisterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterResponse_Data$Type extends MessageType<RegisterResponse_Data> {
    constructor() {
        super("game.RegisterResponse.Data", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterResponse_Data>): RegisterResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterResponse_Data): RegisterResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.RegisterResponse.Data
 */
export const RegisterResponse_Data = new RegisterResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("game.LoginRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Loginresponse$Type extends MessageType<Loginresponse> {
    constructor() {
        super("game.Loginresponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => Loginresponse_Data }
        ]);
    }
    create(value?: PartialMessage<Loginresponse>): Loginresponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Loginresponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Loginresponse): Loginresponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.Loginresponse.Data data */ 2:
                    message.data = Loginresponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Loginresponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.Loginresponse.Data data = 2; */
        if (message.data)
            Loginresponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.Loginresponse
 */
export const Loginresponse = new Loginresponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Loginresponse_Data$Type extends MessageType<Loginresponse_Data> {
    constructor() {
        super("game.Loginresponse.Data", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Loginresponse_Data>): Loginresponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<Loginresponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Loginresponse_Data): Loginresponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Loginresponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.Loginresponse.Data
 */
export const Loginresponse_Data = new Loginresponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MeRequest$Type extends MessageType<MeRequest> {
    constructor() {
        super("game.MeRequest", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MeRequest>): MeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<MeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeRequest): MeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.MeRequest
 */
export const MeRequest = new MeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MeResponse$Type extends MessageType<MeResponse> {
    constructor() {
        super("game.MeResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => MeResponse_Data }
        ]);
    }
    create(value?: PartialMessage<MeResponse>): MeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeResponse): MeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.MeResponse.Data data */ 2:
                    message.data = MeResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.MeResponse.Data data = 2; */
        if (message.data)
            MeResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.MeResponse
 */
export const MeResponse = new MeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MeResponse_Data$Type extends MessageType<MeResponse_Data> {
    constructor() {
        super("game.MeResponse.Data", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MeResponse_Data>): MeResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = "";
        message.userId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<MeResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeResponse_Data): MeResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.MeResponse.Data
 */
export const MeResponse_Data = new MeResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserDetailRequest$Type extends MessageType<UserDetailRequest> {
    constructor() {
        super("game.UserDetailRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserDetailRequest>): UserDetailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<UserDetailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserDetailRequest): UserDetailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserDetailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UserDetailRequest
 */
export const UserDetailRequest = new UserDetailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserDetailResponse$Type extends MessageType<UserDetailResponse> {
    constructor() {
        super("game.UserDetailResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => UserDetailResponse_Data }
        ]);
    }
    create(value?: PartialMessage<UserDetailResponse>): UserDetailResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UserDetailResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserDetailResponse): UserDetailResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.UserDetailResponse.Data data */ 2:
                    message.data = UserDetailResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserDetailResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.UserDetailResponse.Data data = 2; */
        if (message.data)
            UserDetailResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UserDetailResponse
 */
export const UserDetailResponse = new UserDetailResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserDetailResponse_Data$Type extends MessageType<UserDetailResponse_Data> {
    constructor() {
        super("game.UserDetailResponse.Data", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "elo", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserDetailResponse_Data>): UserDetailResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.userName = "";
        message.userEmail = "";
        message.elo = 0;
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<UserDetailResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserDetailResponse_Data): UserDetailResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string user_email */ 3:
                    message.userEmail = reader.string();
                    break;
                case /* int32 elo */ 4:
                    message.elo = reader.int32();
                    break;
                case /* string created_at */ 5:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserDetailResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string user_email = 3; */
        if (message.userEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userEmail);
        /* int32 elo = 4; */
        if (message.elo !== 0)
            writer.tag(4, WireType.Varint).int32(message.elo);
        /* string created_at = 5; */
        if (message.createdAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UserDetailResponse.Data
 */
export const UserDetailResponse_Data = new UserDetailResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecentGameRequest$Type extends MessageType<RecentGameRequest> {
    constructor() {
        super("game.RecentGameRequest", [
            { no: 1, name: "account_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sort", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RecentGameRequest>): RecentGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = "";
        message.filter = "";
        message.sort = "";
        message.limit = 0;
        message.page = 0;
        if (value !== undefined)
            reflectionMergePartial<RecentGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecentGameRequest): RecentGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string account_id */ 1:
                    message.accountId = reader.string();
                    break;
                case /* string filter */ 2:
                    message.filter = reader.string();
                    break;
                case /* string sort */ 3:
                    message.sort = reader.string();
                    break;
                case /* int32 limit */ 4:
                    message.limit = reader.int32();
                    break;
                case /* int32 page */ 5:
                    message.page = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecentGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string account_id = 1; */
        if (message.accountId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountId);
        /* string filter = 2; */
        if (message.filter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.filter);
        /* string sort = 3; */
        if (message.sort !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sort);
        /* int32 limit = 4; */
        if (message.limit !== 0)
            writer.tag(4, WireType.Varint).int32(message.limit);
        /* int32 page = 5; */
        if (message.page !== 0)
            writer.tag(5, WireType.Varint).int32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.RecentGameRequest
 */
export const RecentGameRequest = new RecentGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecentGameResponse$Type extends MessageType<RecentGameResponse> {
    constructor() {
        super("game.RecentGameResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "metadata", kind: "message", T: () => ResponseMetadata },
            { no: 3, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RecentGameResponse_Data }
        ]);
    }
    create(value?: PartialMessage<RecentGameResponse>): RecentGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<RecentGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecentGameResponse): RecentGameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.ResponseMetadata metadata */ 2:
                    message.metadata = ResponseMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* repeated game.RecentGameResponse.Data data */ 3:
                    message.data.push(RecentGameResponse_Data.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecentGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.ResponseMetadata metadata = 2; */
        if (message.metadata)
            ResponseMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated game.RecentGameResponse.Data data = 3; */
        for (let i = 0; i < message.data.length; i++)
            RecentGameResponse_Data.internalBinaryWrite(message.data[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.RecentGameResponse
 */
export const RecentGameResponse = new RecentGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecentGameResponse_Data$Type extends MessageType<RecentGameResponse_Data> {
    constructor() {
        super("game.RecentGameResponse.Data", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "game_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "is_win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "point", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RecentGameResponse_Data>): RecentGameResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.player1 = "";
        message.player2 = "";
        message.gameType = "";
        message.isWin = false;
        message.point = 0;
        if (value !== undefined)
            reflectionMergePartial<RecentGameResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecentGameResponse_Data): RecentGameResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* string player_1 */ 2:
                    message.player1 = reader.string();
                    break;
                case /* string player_2 */ 3:
                    message.player2 = reader.string();
                    break;
                case /* string game_type */ 4:
                    message.gameType = reader.string();
                    break;
                case /* bool is_win */ 5:
                    message.isWin = reader.bool();
                    break;
                case /* int32 point */ 6:
                    message.point = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecentGameResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* string player_1 = 2; */
        if (message.player1 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player1);
        /* string player_2 = 3; */
        if (message.player2 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.player2);
        /* string game_type = 4; */
        if (message.gameType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.gameType);
        /* bool is_win = 5; */
        if (message.isWin !== false)
            writer.tag(5, WireType.Varint).bool(message.isWin);
        /* int32 point = 6; */
        if (message.point !== 0)
            writer.tag(6, WireType.Varint).int32(message.point);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.RecentGameResponse.Data
 */
export const RecentGameResponse_Data = new RecentGameResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaderboardRequest$Type extends MessageType<LeaderboardRequest> {
    constructor() {
        super("game.LeaderboardRequest", [
            { no: 1, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sort", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "limit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "page", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LeaderboardRequest>): LeaderboardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filter = "";
        message.sort = "";
        message.limit = "";
        message.page = "";
        if (value !== undefined)
            reflectionMergePartial<LeaderboardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaderboardRequest): LeaderboardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filter */ 1:
                    message.filter = reader.string();
                    break;
                case /* string sort */ 2:
                    message.sort = reader.string();
                    break;
                case /* string limit */ 3:
                    message.limit = reader.string();
                    break;
                case /* string page */ 4:
                    message.page = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaderboardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filter = 1; */
        if (message.filter !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filter);
        /* string sort = 2; */
        if (message.sort !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sort);
        /* string limit = 3; */
        if (message.limit !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.limit);
        /* string page = 4; */
        if (message.page !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.LeaderboardRequest
 */
export const LeaderboardRequest = new LeaderboardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaderboardResponse$Type extends MessageType<LeaderboardResponse> {
    constructor() {
        super("game.LeaderboardResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "metadata", kind: "message", T: () => ResponseMetadata },
            { no: 3, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LeaderboardResponse_Data }
        ]);
    }
    create(value?: PartialMessage<LeaderboardResponse>): LeaderboardResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial<LeaderboardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaderboardResponse): LeaderboardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.ResponseMetadata metadata */ 2:
                    message.metadata = ResponseMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* repeated game.LeaderboardResponse.Data data */ 3:
                    message.data.push(LeaderboardResponse_Data.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaderboardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.ResponseMetadata metadata = 2; */
        if (message.metadata)
            ResponseMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated game.LeaderboardResponse.Data data = 3; */
        for (let i = 0; i < message.data.length; i++)
            LeaderboardResponse_Data.internalBinaryWrite(message.data[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.LeaderboardResponse
 */
export const LeaderboardResponse = new LeaderboardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaderboardResponse_Data$Type extends MessageType<LeaderboardResponse_Data> {
    constructor() {
        super("game.LeaderboardResponse.Data", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "elo", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LeaderboardResponse_Data>): LeaderboardResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.userName = "";
        message.userEmail = "";
        message.elo = 0;
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<LeaderboardResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaderboardResponse_Data): LeaderboardResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string user_name */ 2:
                    message.userName = reader.string();
                    break;
                case /* string user_email */ 3:
                    message.userEmail = reader.string();
                    break;
                case /* int32 elo */ 4:
                    message.elo = reader.int32();
                    break;
                case /* string created_at */ 5:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaderboardResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string user_name = 2; */
        if (message.userName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userName);
        /* string user_email = 3; */
        if (message.userEmail !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.userEmail);
        /* int32 elo = 4; */
        if (message.elo !== 0)
            writer.tag(4, WireType.Varint).int32(message.elo);
        /* string created_at = 5; */
        if (message.createdAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.LeaderboardResponse.Data
 */
export const LeaderboardResponse_Data = new LeaderboardResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePasswordRequest$Type extends MessageType<UpdatePasswordRequest> {
    constructor() {
        super("game.UpdatePasswordRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "old_pass", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_pass", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePasswordRequest>): UpdatePasswordRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.oldPass = "";
        message.newPass = "";
        if (value !== undefined)
            reflectionMergePartial<UpdatePasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePasswordRequest): UpdatePasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string old_pass */ 2:
                    message.oldPass = reader.string();
                    break;
                case /* string new_pass */ 3:
                    message.newPass = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string old_pass = 2; */
        if (message.oldPass !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.oldPass);
        /* string new_pass = 3; */
        if (message.newPass !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newPass);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UpdatePasswordRequest
 */
export const UpdatePasswordRequest = new UpdatePasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePasswordResponse$Type extends MessageType<UpdatePasswordResponse> {
    constructor() {
        super("game.UpdatePasswordResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => UpdatePasswordResponse_Data }
        ]);
    }
    create(value?: PartialMessage<UpdatePasswordResponse>): UpdatePasswordResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdatePasswordResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePasswordResponse): UpdatePasswordResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.UpdatePasswordResponse.Data data */ 2:
                    message.data = UpdatePasswordResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePasswordResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.UpdatePasswordResponse.Data data = 2; */
        if (message.data)
            UpdatePasswordResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UpdatePasswordResponse
 */
export const UpdatePasswordResponse = new UpdatePasswordResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePasswordResponse_Data$Type extends MessageType<UpdatePasswordResponse_Data> {
    constructor() {
        super("game.UpdatePasswordResponse.Data", [
            { no: 1, name: "empty_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePasswordResponse_Data>): UpdatePasswordResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emptyData = "";
        if (value !== undefined)
            reflectionMergePartial<UpdatePasswordResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePasswordResponse_Data): UpdatePasswordResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string empty_data */ 1:
                    message.emptyData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePasswordResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string empty_data = 1; */
        if (message.emptyData !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emptyData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UpdatePasswordResponse.Data
 */
export const UpdatePasswordResponse_Data = new UpdatePasswordResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("game.DeleteUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserResponse$Type extends MessageType<DeleteUserResponse> {
    constructor() {
        super("game.DeleteUserResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => DeleteUserResponse_Data }
        ]);
    }
    create(value?: PartialMessage<DeleteUserResponse>): DeleteUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserResponse): DeleteUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.DeleteUserResponse.Data data */ 2:
                    message.data = DeleteUserResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.DeleteUserResponse.Data data = 2; */
        if (message.data)
            DeleteUserResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.DeleteUserResponse
 */
export const DeleteUserResponse = new DeleteUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserResponse_Data$Type extends MessageType<DeleteUserResponse_Data> {
    constructor() {
        super("game.DeleteUserResponse.Data", [
            { no: 1, name: "empty_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserResponse_Data>): DeleteUserResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emptyData = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteUserResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserResponse_Data): DeleteUserResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string empty_data */ 1:
                    message.emptyData = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string empty_data = 1; */
        if (message.emptyData !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.emptyData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.DeleteUserResponse.Data
 */
export const DeleteUserResponse_Data = new DeleteUserResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameDetailRequest$Type extends MessageType<GameDetailRequest> {
    constructor() {
        super("game.GameDetailRequest", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameDetailRequest>): GameDetailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        if (value !== undefined)
            reflectionMergePartial<GameDetailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameDetailRequest): GameDetailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameDetailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.GameDetailRequest
 */
export const GameDetailRequest = new GameDetailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameDetailResponse$Type extends MessageType<GameDetailResponse> {
    constructor() {
        super("game.GameDetailResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => GameDetailResponse_Data }
        ]);
    }
    create(value?: PartialMessage<GameDetailResponse>): GameDetailResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameDetailResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameDetailResponse): GameDetailResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.GameDetailResponse.Data data */ 2:
                    message.data = GameDetailResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameDetailResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.GameDetailResponse.Data data = 2; */
        if (message.data)
            GameDetailResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.GameDetailResponse
 */
export const GameDetailResponse = new GameDetailResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameDetailResponse_Data$Type extends MessageType<GameDetailResponse_Data> {
    constructor() {
        super("game.GameDetailResponse.Data", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "move_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "p1_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "p2_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "winner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "p1_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "p2_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "all_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "board", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "duration", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GameDetailResponse_Data>): GameDetailResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.moveCount = 0;
        message.p1Id = "";
        message.p2Id = "";
        message.winner = "";
        message.p1Move = [];
        message.p2Move = [];
        message.allMove = [];
        message.board = [];
        message.createdAt = "";
        message.duration = "";
        if (value !== undefined)
            reflectionMergePartial<GameDetailResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameDetailResponse_Data): GameDetailResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* int32 move_count */ 2:
                    message.moveCount = reader.int32();
                    break;
                case /* string p1_id */ 3:
                    message.p1Id = reader.string();
                    break;
                case /* string p2_id */ 4:
                    message.p2Id = reader.string();
                    break;
                case /* string winner */ 5:
                    message.winner = reader.string();
                    break;
                case /* repeated string p1_move */ 6:
                    message.p1Move.push(reader.string());
                    break;
                case /* repeated string p2_move */ 7:
                    message.p2Move.push(reader.string());
                    break;
                case /* repeated string all_move */ 8:
                    message.allMove.push(reader.string());
                    break;
                case /* repeated string board */ 9:
                    message.board.push(reader.string());
                    break;
                case /* string created_at */ 10:
                    message.createdAt = reader.string();
                    break;
                case /* string duration */ 11:
                    message.duration = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameDetailResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* int32 move_count = 2; */
        if (message.moveCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.moveCount);
        /* string p1_id = 3; */
        if (message.p1Id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.p1Id);
        /* string p2_id = 4; */
        if (message.p2Id !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.p2Id);
        /* string winner = 5; */
        if (message.winner !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.winner);
        /* repeated string p1_move = 6; */
        for (let i = 0; i < message.p1Move.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.p1Move[i]);
        /* repeated string p2_move = 7; */
        for (let i = 0; i < message.p2Move.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.p2Move[i]);
        /* repeated string all_move = 8; */
        for (let i = 0; i < message.allMove.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.allMove[i]);
        /* repeated string board = 9; */
        for (let i = 0; i < message.board.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.board[i]);
        /* string created_at = 10; */
        if (message.createdAt !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.createdAt);
        /* string duration = 11; */
        if (message.duration !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.GameDetailResponse.Data
 */
export const GameDetailResponse_Data = new GameDetailResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGameRequest$Type extends MessageType<CreateGameRequest> {
    constructor() {
        super("game.CreateGameRequest", [
            { no: 1, name: "player_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "game_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGameRequest>): CreateGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.player1 = "";
        message.player2 = "";
        message.gameType = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGameRequest): CreateGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string player_1 */ 1:
                    message.player1 = reader.string();
                    break;
                case /* string player_2 */ 2:
                    message.player2 = reader.string();
                    break;
                case /* string game_type */ 3:
                    message.gameType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string player_1 = 1; */
        if (message.player1 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.player1);
        /* string player_2 = 2; */
        if (message.player2 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player2);
        /* string game_type = 3; */
        if (message.gameType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gameType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.CreateGameRequest
 */
export const CreateGameRequest = new CreateGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGameResponse$Type extends MessageType<CreateGameResponse> {
    constructor() {
        super("game.CreateGameResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => CreateGameResponse_Data }
        ]);
    }
    create(value?: PartialMessage<CreateGameResponse>): CreateGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGameResponse): CreateGameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.CreateGameResponse.Data data */ 2:
                    message.data = CreateGameResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.CreateGameResponse.Data data = 2; */
        if (message.data)
            CreateGameResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.CreateGameResponse
 */
export const CreateGameResponse = new CreateGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGameResponse_Data$Type extends MessageType<CreateGameResponse_Data> {
    constructor() {
        super("game.CreateGameResponse.Data", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player1_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "player1_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "player2_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "player2_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGameResponse_Data>): CreateGameResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.gameType = "";
        message.player1Id = "";
        message.player1Name = "";
        message.player2Id = "";
        message.player2Name = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGameResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGameResponse_Data): CreateGameResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* string game_type */ 2:
                    message.gameType = reader.string();
                    break;
                case /* string player1_id */ 3:
                    message.player1Id = reader.string();
                    break;
                case /* string player1_name */ 4:
                    message.player1Name = reader.string();
                    break;
                case /* string player2_id */ 5:
                    message.player2Id = reader.string();
                    break;
                case /* string player2_name */ 6:
                    message.player2Name = reader.string();
                    break;
                case /* string created_at */ 7:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGameResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* string game_type = 2; */
        if (message.gameType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameType);
        /* string player1_id = 3; */
        if (message.player1Id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.player1Id);
        /* string player1_name = 4; */
        if (message.player1Name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.player1Name);
        /* string player2_id = 5; */
        if (message.player2Id !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.player2Id);
        /* string player2_name = 6; */
        if (message.player2Name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.player2Name);
        /* string created_at = 7; */
        if (message.createdAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.CreateGameResponse.Data
 */
export const CreateGameResponse_Data = new CreateGameResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMoveRequest$Type extends MessageType<UpdateMoveRequest> {
    constructor() {
        super("game.UpdateMoveRequest", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "move", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "board", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateMoveRequest>): UpdateMoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.playerType = 0;
        message.move = "";
        message.board = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateMoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMoveRequest): UpdateMoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* int32 player_type */ 2:
                    message.playerType = reader.int32();
                    break;
                case /* string move */ 3:
                    message.move = reader.string();
                    break;
                case /* repeated string board */ 4:
                    message.board.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* int32 player_type = 2; */
        if (message.playerType !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerType);
        /* string move = 3; */
        if (message.move !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.move);
        /* repeated string board = 4; */
        for (let i = 0; i < message.board.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.board[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UpdateMoveRequest
 */
export const UpdateMoveRequest = new UpdateMoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMoveResponse$Type extends MessageType<UpdateMoveResponse> {
    constructor() {
        super("game.UpdateMoveResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => UpdateMoveResponse_Data }
        ]);
    }
    create(value?: PartialMessage<UpdateMoveResponse>): UpdateMoveResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateMoveResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMoveResponse): UpdateMoveResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.UpdateMoveResponse.Data data */ 2:
                    message.data = UpdateMoveResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMoveResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.UpdateMoveResponse.Data data = 2; */
        if (message.data)
            UpdateMoveResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UpdateMoveResponse
 */
export const UpdateMoveResponse = new UpdateMoveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateMoveResponse_Data$Type extends MessageType<UpdateMoveResponse_Data> {
    constructor() {
        super("game.UpdateMoveResponse.Data", [
            { no: 1, name: "p1_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "p2_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "all_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "board", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "move_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateMoveResponse_Data>): UpdateMoveResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.p1Move = [];
        message.p2Move = [];
        message.allMove = [];
        message.board = [];
        message.moveCount = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateMoveResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMoveResponse_Data): UpdateMoveResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string p1_move */ 1:
                    message.p1Move.push(reader.string());
                    break;
                case /* repeated string p2_move */ 2:
                    message.p2Move.push(reader.string());
                    break;
                case /* repeated string all_move */ 3:
                    message.allMove.push(reader.string());
                    break;
                case /* repeated string board */ 4:
                    message.board.push(reader.string());
                    break;
                case /* int32 move_count */ 5:
                    message.moveCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateMoveResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string p1_move = 1; */
        for (let i = 0; i < message.p1Move.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.p1Move[i]);
        /* repeated string p2_move = 2; */
        for (let i = 0; i < message.p2Move.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.p2Move[i]);
        /* repeated string all_move = 3; */
        for (let i = 0; i < message.allMove.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.allMove[i]);
        /* repeated string board = 4; */
        for (let i = 0; i < message.board.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.board[i]);
        /* int32 move_count = 5; */
        if (message.moveCount !== 0)
            writer.tag(5, WireType.Varint).int32(message.moveCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.UpdateMoveResponse.Data
 */
export const UpdateMoveResponse_Data = new UpdateMoveResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndGameRequest$Type extends MessageType<EndGameRequest> {
    constructor() {
        super("game.EndGameRequest", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "winner", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EndGameRequest>): EndGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.winner = "";
        if (value !== undefined)
            reflectionMergePartial<EndGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndGameRequest): EndGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* string winner */ 2:
                    message.winner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EndGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* string winner = 2; */
        if (message.winner !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.winner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.EndGameRequest
 */
export const EndGameRequest = new EndGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndGameResponse$Type extends MessageType<EndGameResponse> {
    constructor() {
        super("game.EndGameResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => EndGameResponse_Data }
        ]);
    }
    create(value?: PartialMessage<EndGameResponse>): EndGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EndGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndGameResponse): EndGameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.EndGameResponse.Data data */ 2:
                    message.data = EndGameResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EndGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.EndGameResponse.Data data = 2; */
        if (message.data)
            EndGameResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.EndGameResponse
 */
export const EndGameResponse = new EndGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndGameResponse_Data$Type extends MessageType<EndGameResponse_Data> {
    constructor() {
        super("game.EndGameResponse.Data", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "winner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "duration", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "point", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EndGameResponse_Data>): EndGameResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.winner = "";
        message.duration = "";
        message.point = 0;
        if (value !== undefined)
            reflectionMergePartial<EndGameResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndGameResponse_Data): EndGameResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* string winner */ 2:
                    message.winner = reader.string();
                    break;
                case /* string duration */ 3:
                    message.duration = reader.string();
                    break;
                case /* int32 point */ 4:
                    message.point = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EndGameResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* string winner = 2; */
        if (message.winner !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.winner);
        /* string duration = 3; */
        if (message.duration !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.duration);
        /* int32 point = 4; */
        if (message.point !== 0)
            writer.tag(4, WireType.Varint).int32(message.point);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.EndGameResponse.Data
 */
export const EndGameResponse_Data = new EndGameResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BotMoveRequest$Type extends MessageType<BotMoveRequest> {
    constructor() {
        super("game.BotMoveRequest", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "board", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BotMoveRequest>): BotMoveRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.board = [];
        if (value !== undefined)
            reflectionMergePartial<BotMoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BotMoveRequest): BotMoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* repeated string board */ 2:
                    message.board.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BotMoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* repeated string board = 2; */
        for (let i = 0; i < message.board.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.board[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.BotMoveRequest
 */
export const BotMoveRequest = new BotMoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BotMoveResponse$Type extends MessageType<BotMoveResponse> {
    constructor() {
        super("game.BotMoveResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => BotMoveResponse_Data }
        ]);
    }
    create(value?: PartialMessage<BotMoveResponse>): BotMoveResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BotMoveResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BotMoveResponse): BotMoveResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.BotMoveResponse.Data data */ 2:
                    message.data = BotMoveResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BotMoveResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.BotMoveResponse.Data data = 2; */
        if (message.data)
            BotMoveResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.BotMoveResponse
 */
export const BotMoveResponse = new BotMoveResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BotMoveResponse_Data$Type extends MessageType<BotMoveResponse_Data> {
    constructor() {
        super("game.BotMoveResponse.Data", [
            { no: 1, name: "p1_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "p2_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "all_move", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "board", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "move_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BotMoveResponse_Data>): BotMoveResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.p1Move = [];
        message.p2Move = [];
        message.allMove = [];
        message.board = [];
        message.moveCount = 0;
        if (value !== undefined)
            reflectionMergePartial<BotMoveResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BotMoveResponse_Data): BotMoveResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string p1_move */ 1:
                    message.p1Move.push(reader.string());
                    break;
                case /* repeated string p2_move */ 2:
                    message.p2Move.push(reader.string());
                    break;
                case /* repeated string all_move */ 3:
                    message.allMove.push(reader.string());
                    break;
                case /* repeated string board */ 4:
                    message.board.push(reader.string());
                    break;
                case /* int32 move_count */ 5:
                    message.moveCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BotMoveResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string p1_move = 1; */
        for (let i = 0; i < message.p1Move.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.p1Move[i]);
        /* repeated string p2_move = 2; */
        for (let i = 0; i < message.p2Move.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.p2Move[i]);
        /* repeated string all_move = 3; */
        for (let i = 0; i < message.allMove.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.allMove[i]);
        /* repeated string board = 4; */
        for (let i = 0; i < message.board.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.board[i]);
        /* int32 move_count = 5; */
        if (message.moveCount !== 0)
            writer.tag(5, WireType.Varint).int32(message.moveCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.BotMoveResponse.Data
 */
export const BotMoveResponse_Data = new BotMoveResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoomRequest$Type extends MessageType<CreateRoomRequest> {
    constructor() {
        super("game.CreateRoomRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRoomRequest>): CreateRoomRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateRoomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoomRequest): CreateRoomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.CreateRoomRequest
 */
export const CreateRoomRequest = new CreateRoomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoomResponse$Type extends MessageType<CreateRoomResponse> {
    constructor() {
        super("game.CreateRoomResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => CreateRoomResponse_Data }
        ]);
    }
    create(value?: PartialMessage<CreateRoomResponse>): CreateRoomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateRoomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoomResponse): CreateRoomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.CreateRoomResponse.Data data */ 2:
                    message.data = CreateRoomResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.CreateRoomResponse.Data data = 2; */
        if (message.data)
            CreateRoomResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.CreateRoomResponse
 */
export const CreateRoomResponse = new CreateRoomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRoomResponse_Data$Type extends MessageType<CreateRoomResponse_Data> {
    constructor() {
        super("game.CreateRoomResponse.Data", [
            { no: 1, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_wait", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRoomResponse_Data>): CreateRoomResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = "";
        message.creator = "";
        message.isWait = false;
        if (value !== undefined)
            reflectionMergePartial<CreateRoomResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRoomResponse_Data): CreateRoomResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string room_id */ 1:
                    message.roomId = reader.string();
                    break;
                case /* string creator */ 2:
                    message.creator = reader.string();
                    break;
                case /* bool is_wait */ 3:
                    message.isWait = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRoomResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string room_id = 1; */
        if (message.roomId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roomId);
        /* string creator = 2; */
        if (message.creator !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.creator);
        /* bool is_wait = 3; */
        if (message.isWait !== false)
            writer.tag(3, WireType.Varint).bool(message.isWait);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.CreateRoomResponse.Data
 */
export const CreateRoomResponse_Data = new CreateRoomResponse_Data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinRoomRequest$Type extends MessageType<JoinRoomRequest> {
    constructor() {
        super("game.JoinRoomRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "room_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinRoomRequest>): JoinRoomRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.roomId = "";
        if (value !== undefined)
            reflectionMergePartial<JoinRoomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinRoomRequest): JoinRoomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string room_id */ 2:
                    message.roomId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinRoomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string room_id = 2; */
        if (message.roomId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.JoinRoomRequest
 */
export const JoinRoomRequest = new JoinRoomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinroomResponse$Type extends MessageType<JoinroomResponse> {
    constructor() {
        super("game.JoinroomResponse", [
            { no: 1, name: "status", kind: "message", T: () => ResponseStatus },
            { no: 2, name: "data", kind: "message", T: () => JoinroomResponse_Data }
        ]);
    }
    create(value?: PartialMessage<JoinroomResponse>): JoinroomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<JoinroomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinroomResponse): JoinroomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game.ResponseStatus status */ 1:
                    message.status = ResponseStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* game.JoinroomResponse.Data data */ 2:
                    message.data = JoinroomResponse_Data.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinroomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game.ResponseStatus status = 1; */
        if (message.status)
            ResponseStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* game.JoinroomResponse.Data data = 2; */
        if (message.data)
            JoinroomResponse_Data.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.JoinroomResponse
 */
export const JoinroomResponse = new JoinroomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinroomResponse_Data$Type extends MessageType<JoinroomResponse_Data> {
    constructor() {
        super("game.JoinroomResponse.Data", [
            { no: 1, name: "game_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "player_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "player_2", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JoinroomResponse_Data>): JoinroomResponse_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameId = "";
        message.player1 = "";
        message.player2 = "";
        if (value !== undefined)
            reflectionMergePartial<JoinroomResponse_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinroomResponse_Data): JoinroomResponse_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game_id */ 1:
                    message.gameId = reader.string();
                    break;
                case /* string player_1 */ 2:
                    message.player1 = reader.string();
                    break;
                case /* string player_2 */ 3:
                    message.player2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinroomResponse_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game_id = 1; */
        if (message.gameId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.gameId);
        /* string player_1 = 2; */
        if (message.player1 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.player1);
        /* string player_2 = 3; */
        if (message.player2 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.player2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game.JoinroomResponse.Data
 */
export const JoinroomResponse_Data = new JoinroomResponse_Data$Type();
/**
 * @generated ServiceType for protobuf service game.UserAuth
 */
export const UserAuth = new ServiceType("game.UserAuth", [
    { name: "Register", options: { "google.api.http": { post: "/game.UserAuth/Register", body: "*" } }, I: RegisterRequest, O: RegisterResponse },
    { name: "Login", options: { "google.api.http": { post: "/game.UserAuth/Login", body: "*" } }, I: LoginRequest, O: Loginresponse },
    { name: "Me", options: { "google.api.http": { post: "/game.UserAuth/Me", body: "*" } }, I: MeRequest, O: MeResponse },
    { name: "UpdatePassword", options: { "google.api.http": { post: "/game.UserAuth/UpdatePassword", body: "*" } }, I: UpdatePasswordRequest, O: UpdatePasswordResponse },
    { name: "DeleteUser", options: { "google.api.http": { post: "/game.UserAuth/DeleteUser", body: "*" } }, I: DeleteUserRequest, O: DeleteUserResponse }
]);
/**
 * @generated ServiceType for protobuf service game.GameUser
 */
export const GameUser = new ServiceType("game.GameUser", [
    { name: "GetUserDetail", options: { "google.api.http": { post: "/game.GameUser/GetUserDetail", body: "*" } }, I: UserDetailRequest, O: UserDetailResponse },
    { name: "GetRecentGame", options: { "google.api.http": { post: "/game.GameUser/GetRecentGame", body: "*" } }, I: RecentGameRequest, O: RecentGameResponse },
    { name: "GetLeaderBoard", options: { "google.api.http": { post: "/game.GameUser/GetLeaderBoard", body: "*" } }, I: LeaderboardRequest, O: LeaderboardResponse }
]);
/**
 * @generated ServiceType for protobuf service game.GameGame
 */
export const GameGame = new ServiceType("game.GameGame", [
    { name: "GetgameDetail", options: { "google.api.http": { post: "/game.GameGame/GetgameDetail", body: "*" } }, I: GameDetailRequest, O: GameDetailResponse },
    { name: "CreateGame", options: { "google.api.http": { post: "/game.GameGame/CreateGame", body: "*" } }, I: CreateGameRequest, O: CreateGameResponse },
    { name: "UpdateMove", options: { "google.api.http": { post: "/game.GameGame/UpdateMove", body: "*" } }, I: UpdateMoveRequest, O: UpdateMoveResponse },
    { name: "EndGame", options: { "google.api.http": { post: "/game.GameGame/EndGame", body: "*" } }, I: EndGameRequest, O: EndGameResponse },
    { name: "GetBotMove", options: { "google.api.http": { post: "/game.GameGame/GetBotMove", body: "*" } }, I: BotMoveRequest, O: BotMoveResponse }
]);
/**
 * @generated ServiceType for protobuf service game.GameRoom
 */
export const GameRoom = new ServiceType("game.GameRoom", [
    { name: "CreateRoom", options: { "google.api.http": { post: "/game.GameRoom/CreateRoom", body: "*" } }, I: CreateRoomRequest, O: CreateRoomResponse },
    { name: "JoinRoom", options: { "google.api.http": { post: "/game.GameRoom/JoinRoom", body: "*" } }, I: JoinRoomRequest, O: JoinroomResponse }
]);
