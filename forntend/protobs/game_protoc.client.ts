// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "game_protoc.proto" (package "game", syntax proto3)
// tslint:disable
import { GameRoom } from "./game_protoc";
import type { JoinroomResponse } from "./game_protoc";
import type { JoinRoomRequest } from "./game_protoc";
import type { CreateRoomResponse } from "./game_protoc";
import type { CreateRoomRequest } from "./game_protoc";
import { GameGame } from "./game_protoc";
import type { BotMoveResponse } from "./game_protoc";
import type { BotMoveRequest } from "./game_protoc";
import type { EndGameResponse } from "./game_protoc";
import type { EndGameRequest } from "./game_protoc";
import type { UpdateMoveResponse } from "./game_protoc";
import type { UpdateMoveRequest } from "./game_protoc";
import type { CreateGameResponse } from "./game_protoc";
import type { CreateGameRequest } from "./game_protoc";
import type { GameDetailResponse } from "./game_protoc";
import type { GameDetailRequest } from "./game_protoc";
import { GameUser } from "./game_protoc";
import type { LeaderboardResponse } from "./game_protoc";
import type { LeaderboardRequest } from "./game_protoc";
import type { RecentGameResponse } from "./game_protoc";
import type { RecentGameRequest } from "./game_protoc";
import type { UserDetailResponse } from "./game_protoc";
import type { UserDetailRequest } from "./game_protoc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserAuth } from "./game_protoc";
import type { DeleteUserResponse } from "./game_protoc";
import type { DeleteUserRequest } from "./game_protoc";
import type { UpdatePasswordResponse } from "./game_protoc";
import type { UpdatePasswordRequest } from "./game_protoc";
import type { MeResponse } from "./game_protoc";
import type { MeRequest } from "./game_protoc";
import type { Loginresponse } from "./game_protoc";
import type { LoginRequest } from "./game_protoc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RegisterResponse } from "./game_protoc";
import type { RegisterRequest } from "./game_protoc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service game.UserAuth
 */
export interface IUserAuthClient {
    /**
     * @generated from protobuf rpc: Register(game.RegisterRequest) returns (game.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse>;
    /**
     * @generated from protobuf rpc: Login(game.LoginRequest) returns (game.Loginresponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, Loginresponse>;
    /**
     * @generated from protobuf rpc: Me(game.MeRequest) returns (game.MeResponse);
     */
    me(input: MeRequest, options?: RpcOptions): UnaryCall<MeRequest, MeResponse>;
    /**
     * @generated from protobuf rpc: UpdatePassword(game.UpdatePasswordRequest) returns (game.UpdatePasswordResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, UpdatePasswordResponse>;
    /**
     * @generated from protobuf rpc: DeleteUser(game.DeleteUserRequest) returns (game.DeleteUserResponse);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse>;
}
/**
 * @generated from protobuf service game.UserAuth
 */
export class UserAuthClient implements IUserAuthClient, ServiceInfo {
    typeName = UserAuth.typeName;
    methods = UserAuth.methods;
    options = UserAuth.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Register(game.RegisterRequest) returns (game.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, RegisterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Login(game.LoginRequest) returns (game.Loginresponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, Loginresponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, Loginresponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Me(game.MeRequest) returns (game.MeResponse);
     */
    me(input: MeRequest, options?: RpcOptions): UnaryCall<MeRequest, MeResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MeRequest, MeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePassword(game.UpdatePasswordRequest) returns (game.UpdatePasswordResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, UpdatePasswordResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePasswordRequest, UpdatePasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(game.DeleteUserRequest) returns (game.DeleteUserResponse);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserRequest, DeleteUserResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service game.GameUser
 */
export interface IGameUserClient {
    /**
     * @generated from protobuf rpc: GetUserDetail(game.UserDetailRequest) returns (game.UserDetailResponse);
     */
    getUserDetail(input: UserDetailRequest, options?: RpcOptions): UnaryCall<UserDetailRequest, UserDetailResponse>;
    /**
     * @generated from protobuf rpc: GetRecentGame(game.RecentGameRequest) returns (game.RecentGameResponse);
     */
    getRecentGame(input: RecentGameRequest, options?: RpcOptions): UnaryCall<RecentGameRequest, RecentGameResponse>;
    /**
     * @generated from protobuf rpc: GetLeaderBoard(game.LeaderboardRequest) returns (game.LeaderboardResponse);
     */
    getLeaderBoard(input: LeaderboardRequest, options?: RpcOptions): UnaryCall<LeaderboardRequest, LeaderboardResponse>;
}
/**
 * @generated from protobuf service game.GameUser
 */
export class GameUserClient implements IGameUserClient, ServiceInfo {
    typeName = GameUser.typeName;
    methods = GameUser.methods;
    options = GameUser.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetUserDetail(game.UserDetailRequest) returns (game.UserDetailResponse);
     */
    getUserDetail(input: UserDetailRequest, options?: RpcOptions): UnaryCall<UserDetailRequest, UserDetailResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserDetailRequest, UserDetailResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRecentGame(game.RecentGameRequest) returns (game.RecentGameResponse);
     */
    getRecentGame(input: RecentGameRequest, options?: RpcOptions): UnaryCall<RecentGameRequest, RecentGameResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecentGameRequest, RecentGameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLeaderBoard(game.LeaderboardRequest) returns (game.LeaderboardResponse);
     */
    getLeaderBoard(input: LeaderboardRequest, options?: RpcOptions): UnaryCall<LeaderboardRequest, LeaderboardResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<LeaderboardRequest, LeaderboardResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service game.GameGame
 */
export interface IGameGameClient {
    /**
     * @generated from protobuf rpc: GetgameDetail(game.GameDetailRequest) returns (game.GameDetailResponse);
     */
    getgameDetail(input: GameDetailRequest, options?: RpcOptions): UnaryCall<GameDetailRequest, GameDetailResponse>;
    /**
     * @generated from protobuf rpc: CreateGame(game.CreateGameRequest) returns (game.CreateGameResponse);
     */
    createGame(input: CreateGameRequest, options?: RpcOptions): UnaryCall<CreateGameRequest, CreateGameResponse>;
    /**
     * @generated from protobuf rpc: UpdateMove(game.UpdateMoveRequest) returns (game.UpdateMoveResponse);
     */
    updateMove(input: UpdateMoveRequest, options?: RpcOptions): UnaryCall<UpdateMoveRequest, UpdateMoveResponse>;
    /**
     * @generated from protobuf rpc: EndGame(game.EndGameRequest) returns (game.EndGameResponse);
     */
    endGame(input: EndGameRequest, options?: RpcOptions): UnaryCall<EndGameRequest, EndGameResponse>;
    /**
     * @generated from protobuf rpc: GetBotMove(game.BotMoveRequest) returns (game.BotMoveResponse);
     */
    getBotMove(input: BotMoveRequest, options?: RpcOptions): UnaryCall<BotMoveRequest, BotMoveResponse>;
}
/**
 * @generated from protobuf service game.GameGame
 */
export class GameGameClient implements IGameGameClient, ServiceInfo {
    typeName = GameGame.typeName;
    methods = GameGame.methods;
    options = GameGame.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetgameDetail(game.GameDetailRequest) returns (game.GameDetailResponse);
     */
    getgameDetail(input: GameDetailRequest, options?: RpcOptions): UnaryCall<GameDetailRequest, GameDetailResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GameDetailRequest, GameDetailResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateGame(game.CreateGameRequest) returns (game.CreateGameResponse);
     */
    createGame(input: CreateGameRequest, options?: RpcOptions): UnaryCall<CreateGameRequest, CreateGameResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateGameRequest, CreateGameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateMove(game.UpdateMoveRequest) returns (game.UpdateMoveResponse);
     */
    updateMove(input: UpdateMoveRequest, options?: RpcOptions): UnaryCall<UpdateMoveRequest, UpdateMoveResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateMoveRequest, UpdateMoveResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EndGame(game.EndGameRequest) returns (game.EndGameResponse);
     */
    endGame(input: EndGameRequest, options?: RpcOptions): UnaryCall<EndGameRequest, EndGameResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<EndGameRequest, EndGameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBotMove(game.BotMoveRequest) returns (game.BotMoveResponse);
     */
    getBotMove(input: BotMoveRequest, options?: RpcOptions): UnaryCall<BotMoveRequest, BotMoveResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<BotMoveRequest, BotMoveResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service game.GameRoom
 */
export interface IGameRoomClient {
    /**
     * @generated from protobuf rpc: CreateRoom(game.CreateRoomRequest) returns (game.CreateRoomResponse);
     */
    createRoom(input: CreateRoomRequest, options?: RpcOptions): UnaryCall<CreateRoomRequest, CreateRoomResponse>;
    /**
     * @generated from protobuf rpc: JoinRoom(game.JoinRoomRequest) returns (game.JoinroomResponse);
     */
    joinRoom(input: JoinRoomRequest, options?: RpcOptions): UnaryCall<JoinRoomRequest, JoinroomResponse>;
}
/**
 * @generated from protobuf service game.GameRoom
 */
export class GameRoomClient implements IGameRoomClient, ServiceInfo {
    typeName = GameRoom.typeName;
    methods = GameRoom.methods;
    options = GameRoom.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateRoom(game.CreateRoomRequest) returns (game.CreateRoomResponse);
     */
    createRoom(input: CreateRoomRequest, options?: RpcOptions): UnaryCall<CreateRoomRequest, CreateRoomResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRoomRequest, CreateRoomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: JoinRoom(game.JoinRoomRequest) returns (game.JoinroomResponse);
     */
    joinRoom(input: JoinRoomRequest, options?: RpcOptions): UnaryCall<JoinRoomRequest, JoinroomResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinRoomRequest, JoinroomResponse>("unary", this._transport, method, opt, input);
    }
}
