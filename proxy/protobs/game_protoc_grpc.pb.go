// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: game_protoc.proto

package UTS_5027221032_Muhammad_Afif

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAuth_Register_FullMethodName       = "/game.UserAuth/Register"
	UserAuth_Login_FullMethodName          = "/game.UserAuth/Login"
	UserAuth_Me_FullMethodName             = "/game.UserAuth/Me"
	UserAuth_UpdatePassword_FullMethodName = "/game.UserAuth/UpdatePassword"
	UserAuth_DeleteUser_FullMethodName     = "/game.UserAuth/DeleteUser"
)

// UserAuthClient is the client API for UserAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Loginresponse, error)
	Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type userAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthClient(cc grpc.ClientConnInterface) UserAuthClient {
	return &userAuthClient{cc}
}

func (c *userAuthClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, UserAuth_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Loginresponse, error) {
	out := new(Loginresponse)
	err := c.cc.Invoke(ctx, UserAuth_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) Me(ctx context.Context, in *MeRequest, opts ...grpc.CallOption) (*MeResponse, error) {
	out := new(MeResponse)
	err := c.cc.Invoke(ctx, UserAuth_Me_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, UserAuth_UpdatePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserAuth_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServer is the server API for UserAuth service.
// All implementations must embed UnimplementedUserAuthServer
// for forward compatibility
type UserAuthServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*Loginresponse, error)
	Me(context.Context, *MeRequest) (*MeResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	mustEmbedUnimplementedUserAuthServer()
}

// UnimplementedUserAuthServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthServer struct {
}

func (UnimplementedUserAuthServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserAuthServer) Login(context.Context, *LoginRequest) (*Loginresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserAuthServer) Me(context.Context, *MeRequest) (*MeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (UnimplementedUserAuthServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserAuthServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserAuthServer) mustEmbedUnimplementedUserAuthServer() {}

// UnsafeUserAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServer will
// result in compilation errors.
type UnsafeUserAuthServer interface {
	mustEmbedUnimplementedUserAuthServer()
}

func RegisterUserAuthServer(s grpc.ServiceRegistrar, srv UserAuthServer) {
	s.RegisterService(&UserAuth_ServiceDesc, srv)
}

func _UserAuth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_Me_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).Me(ctx, req.(*MeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuth_ServiceDesc is the grpc.ServiceDesc for UserAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.UserAuth",
	HandlerType: (*UserAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserAuth_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserAuth_Login_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _UserAuth_Me_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserAuth_UpdatePassword_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserAuth_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_protoc.proto",
}

const (
	GameUser_GetUserDetail_FullMethodName  = "/game.GameUser/GetUserDetail"
	GameUser_GetRecentGame_FullMethodName  = "/game.GameUser/GetRecentGame"
	GameUser_GetLeaderBoard_FullMethodName = "/game.GameUser/GetLeaderBoard"
)

// GameUserClient is the client API for GameUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameUserClient interface {
	GetUserDetail(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailResponse, error)
	GetRecentGame(ctx context.Context, in *RecentGameRequest, opts ...grpc.CallOption) (*RecentGameResponse, error)
	GetLeaderBoard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error)
}

type gameUserClient struct {
	cc grpc.ClientConnInterface
}

func NewGameUserClient(cc grpc.ClientConnInterface) GameUserClient {
	return &gameUserClient{cc}
}

func (c *gameUserClient) GetUserDetail(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailResponse, error) {
	out := new(UserDetailResponse)
	err := c.cc.Invoke(ctx, GameUser_GetUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameUserClient) GetRecentGame(ctx context.Context, in *RecentGameRequest, opts ...grpc.CallOption) (*RecentGameResponse, error) {
	out := new(RecentGameResponse)
	err := c.cc.Invoke(ctx, GameUser_GetRecentGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameUserClient) GetLeaderBoard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (*LeaderboardResponse, error) {
	out := new(LeaderboardResponse)
	err := c.cc.Invoke(ctx, GameUser_GetLeaderBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameUserServer is the server API for GameUser service.
// All implementations must embed UnimplementedGameUserServer
// for forward compatibility
type GameUserServer interface {
	GetUserDetail(context.Context, *UserDetailRequest) (*UserDetailResponse, error)
	GetRecentGame(context.Context, *RecentGameRequest) (*RecentGameResponse, error)
	GetLeaderBoard(context.Context, *LeaderboardRequest) (*LeaderboardResponse, error)
	mustEmbedUnimplementedGameUserServer()
}

// UnimplementedGameUserServer must be embedded to have forward compatible implementations.
type UnimplementedGameUserServer struct {
}

func (UnimplementedGameUserServer) GetUserDetail(context.Context, *UserDetailRequest) (*UserDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetail not implemented")
}
func (UnimplementedGameUserServer) GetRecentGame(context.Context, *RecentGameRequest) (*RecentGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentGame not implemented")
}
func (UnimplementedGameUserServer) GetLeaderBoard(context.Context, *LeaderboardRequest) (*LeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderBoard not implemented")
}
func (UnimplementedGameUserServer) mustEmbedUnimplementedGameUserServer() {}

// UnsafeGameUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameUserServer will
// result in compilation errors.
type UnsafeGameUserServer interface {
	mustEmbedUnimplementedGameUserServer()
}

func RegisterGameUserServer(s grpc.ServiceRegistrar, srv GameUserServer) {
	s.RegisterService(&GameUser_ServiceDesc, srv)
}

func _GameUser_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameUserServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameUser_GetUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameUserServer).GetUserDetail(ctx, req.(*UserDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameUser_GetRecentGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameUserServer).GetRecentGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameUser_GetRecentGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameUserServer).GetRecentGame(ctx, req.(*RecentGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameUser_GetLeaderBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameUserServer).GetLeaderBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameUser_GetLeaderBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameUserServer).GetLeaderBoard(ctx, req.(*LeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameUser_ServiceDesc is the grpc.ServiceDesc for GameUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameUser",
	HandlerType: (*GameUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDetail",
			Handler:    _GameUser_GetUserDetail_Handler,
		},
		{
			MethodName: "GetRecentGame",
			Handler:    _GameUser_GetRecentGame_Handler,
		},
		{
			MethodName: "GetLeaderBoard",
			Handler:    _GameUser_GetLeaderBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_protoc.proto",
}

const (
	GameGame_GetgameDetail_FullMethodName = "/game.GameGame/GetgameDetail"
	GameGame_CreateGame_FullMethodName    = "/game.GameGame/CreateGame"
	GameGame_UpdateMove_FullMethodName    = "/game.GameGame/UpdateMove"
	GameGame_EndGame_FullMethodName       = "/game.GameGame/EndGame"
	GameGame_GetBotMove_FullMethodName    = "/game.GameGame/GetBotMove"
)

// GameGameClient is the client API for GameGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameGameClient interface {
	GetgameDetail(ctx context.Context, in *GameDetailRequest, opts ...grpc.CallOption) (*GameDetailResponse, error)
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	UpdateMove(ctx context.Context, in *UpdateMoveRequest, opts ...grpc.CallOption) (*UpdateMoveResponse, error)
	EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*EndGameResponse, error)
	GetBotMove(ctx context.Context, in *BotMoveRequest, opts ...grpc.CallOption) (*BotMoveResponse, error)
}

type gameGameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameGameClient(cc grpc.ClientConnInterface) GameGameClient {
	return &gameGameClient{cc}
}

func (c *gameGameClient) GetgameDetail(ctx context.Context, in *GameDetailRequest, opts ...grpc.CallOption) (*GameDetailResponse, error) {
	out := new(GameDetailResponse)
	err := c.cc.Invoke(ctx, GameGame_GetgameDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameGameClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, GameGame_CreateGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameGameClient) UpdateMove(ctx context.Context, in *UpdateMoveRequest, opts ...grpc.CallOption) (*UpdateMoveResponse, error) {
	out := new(UpdateMoveResponse)
	err := c.cc.Invoke(ctx, GameGame_UpdateMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameGameClient) EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*EndGameResponse, error) {
	out := new(EndGameResponse)
	err := c.cc.Invoke(ctx, GameGame_EndGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameGameClient) GetBotMove(ctx context.Context, in *BotMoveRequest, opts ...grpc.CallOption) (*BotMoveResponse, error) {
	out := new(BotMoveResponse)
	err := c.cc.Invoke(ctx, GameGame_GetBotMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameGameServer is the server API for GameGame service.
// All implementations must embed UnimplementedGameGameServer
// for forward compatibility
type GameGameServer interface {
	GetgameDetail(context.Context, *GameDetailRequest) (*GameDetailResponse, error)
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	UpdateMove(context.Context, *UpdateMoveRequest) (*UpdateMoveResponse, error)
	EndGame(context.Context, *EndGameRequest) (*EndGameResponse, error)
	GetBotMove(context.Context, *BotMoveRequest) (*BotMoveResponse, error)
	mustEmbedUnimplementedGameGameServer()
}

// UnimplementedGameGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameGameServer struct {
}

func (UnimplementedGameGameServer) GetgameDetail(context.Context, *GameDetailRequest) (*GameDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetgameDetail not implemented")
}
func (UnimplementedGameGameServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameGameServer) UpdateMove(context.Context, *UpdateMoveRequest) (*UpdateMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMove not implemented")
}
func (UnimplementedGameGameServer) EndGame(context.Context, *EndGameRequest) (*EndGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndGame not implemented")
}
func (UnimplementedGameGameServer) GetBotMove(context.Context, *BotMoveRequest) (*BotMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotMove not implemented")
}
func (UnimplementedGameGameServer) mustEmbedUnimplementedGameGameServer() {}

// UnsafeGameGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameGameServer will
// result in compilation errors.
type UnsafeGameGameServer interface {
	mustEmbedUnimplementedGameGameServer()
}

func RegisterGameGameServer(s grpc.ServiceRegistrar, srv GameGameServer) {
	s.RegisterService(&GameGame_ServiceDesc, srv)
}

func _GameGame_GetgameDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameGameServer).GetgameDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameGame_GetgameDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameGameServer).GetgameDetail(ctx, req.(*GameDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameGame_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameGameServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameGame_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameGameServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameGame_UpdateMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameGameServer).UpdateMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameGame_UpdateMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameGameServer).UpdateMove(ctx, req.(*UpdateMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameGame_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameGameServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameGame_EndGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameGameServer).EndGame(ctx, req.(*EndGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameGame_GetBotMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameGameServer).GetBotMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameGame_GetBotMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameGameServer).GetBotMove(ctx, req.(*BotMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameGame_ServiceDesc is the grpc.ServiceDesc for GameGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameGame",
	HandlerType: (*GameGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetgameDetail",
			Handler:    _GameGame_GetgameDetail_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _GameGame_CreateGame_Handler,
		},
		{
			MethodName: "UpdateMove",
			Handler:    _GameGame_UpdateMove_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _GameGame_EndGame_Handler,
		},
		{
			MethodName: "GetBotMove",
			Handler:    _GameGame_GetBotMove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_protoc.proto",
}

const (
	GameRoom_CreateRoom_FullMethodName = "/game.GameRoom/CreateRoom"
	GameRoom_JoinRoom_FullMethodName   = "/game.GameRoom/JoinRoom"
)

// GameRoomClient is the client API for GameRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameRoomClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinroomResponse, error)
}

type gameRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewGameRoomClient(cc grpc.ClientConnInterface) GameRoomClient {
	return &gameRoomClient{cc}
}

func (c *gameRoomClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, GameRoom_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRoomClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinroomResponse, error) {
	out := new(JoinroomResponse)
	err := c.cc.Invoke(ctx, GameRoom_JoinRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameRoomServer is the server API for GameRoom service.
// All implementations must embed UnimplementedGameRoomServer
// for forward compatibility
type GameRoomServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinroomResponse, error)
	mustEmbedUnimplementedGameRoomServer()
}

// UnimplementedGameRoomServer must be embedded to have forward compatible implementations.
type UnimplementedGameRoomServer struct {
}

func (UnimplementedGameRoomServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedGameRoomServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedGameRoomServer) mustEmbedUnimplementedGameRoomServer() {}

// UnsafeGameRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameRoomServer will
// result in compilation errors.
type UnsafeGameRoomServer interface {
	mustEmbedUnimplementedGameRoomServer()
}

func RegisterGameRoomServer(s grpc.ServiceRegistrar, srv GameRoomServer) {
	s.RegisterService(&GameRoom_ServiceDesc, srv)
}

func _GameRoom_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRoomServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameRoom_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRoomServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRoom_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRoomServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameRoom_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRoomServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameRoom_ServiceDesc is the grpc.ServiceDesc for GameRoom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameRoom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameRoom",
	HandlerType: (*GameRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _GameRoom_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _GameRoom_JoinRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_protoc.proto",
}
